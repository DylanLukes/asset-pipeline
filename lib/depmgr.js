// Generated by CoffeeScript 1.2.1-pre
(function() {
  var DepsManager, async, fs, logcheck, util;

  util = require('./util');

  fs = require('fs');

  async = require('async');

  logcheck = function logcheck(fn) {
    return function(file, cb) {
      console.log('Oo');
      return fn.call(this, file, function(err, res) {
        util.log(err ? "file " + file + " cannot be checked" : res ? "file " + file + " has been changed" : "file " + file + " is the same");
        return cb(err, res);
      });
    };
  };

  DepsManager = (function() {

    DepsManager.name = 'DepsManager';

    function DepsManager(base) {
      this.base = base;
      this.resolving = {};
      this.deplist = {};
      this.files = {};
      this.min_check_time = 500;
    }

    DepsManager.prototype.depends_on = function depends_on(file, deplist) {
      var dep, _i, _len, _results;
      util.log("file " + file + " depends on [" + (deplist.join(',')) + "]");
      this.deplist[file] = {};
      _results = [];
      for (_i = 0, _len = deplist.length; _i < _len; _i++) {
        dep = deplist[_i];
        _results.push(this.deplist[file][dep] = true);
      }
      return _results;
    };

    DepsManager.prototype.resolves_to = function resolves_to(file, path) {
      var _this = this;
      if (path == null) {
        util.log("file " + file + " is not resolved");
        delete this.resolving[file];
        return;
      }
      util.log("file " + file + " is resolved into " + path);
      this.resolving[file] = path;
      return fs.stat(path, function(err, res) {
        if (err) return;
        return _this.files[path] = {
          checked: Date.now(),
          mtime: Number(res.mtime)
        };
      });
    };

    DepsManager.prototype.check = logcheck(function(file, cb) {
      var path,
        _this = this;
      if (this.resolving[file] == null) return cb(null, false);
      path = this.resolving[file];
      if (this.files[path] == null) return cb(null, false);
      return fs.stat(path, function(err, res) {
        var dep, funcs, newtime;
        if (err) return cb(err);
        newtime = Number(res.mtime);
        if (newtime !== _this.files[path].mtime) return cb(null, true);
        funcs = [];
        console.log(_this.deplist);
        console.log(_this.resolving);
        if (_this.deplist[path] != null) {
          for (dep in _this.deplist[path]) {
            funcs.push(_this.check.bind(_this, dep));
          }
        }
        return async.parallel(funcs, function(err, res) {
          var i;
          if (err) return cb(err);
          return cb(null, !!((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = res.length; _i < _len; _i++) {
              i = res[_i];
              if (!!i) _results.push(1);
            }
            return _results;
          })()).length);
        });
      });
    });

    return DepsManager;

  })();

  module.exports = DepsManager;

}).call(this);
