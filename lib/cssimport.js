// Generated by CoffeeScript 1.2.1-pre
(function() {
  var Path, async, found_css_dep, fs, scan_code;

  async = require('async');

  Path = require('path');

  fs = require('fs');

  found_css_dep = function found_css_dep(pipeline, ext, path) {
    return function(cb) {
      return pipeline.compile_file(path, function(err, res) {
        var cachedname, filename;
        if (err) return cb(err);
        filename = Path.join(pipeline.options.assets, path);
        cachedname = Path.join(pipeline.options.cache, path);
        return fs.readFile(cachedname, 'utf8', function(err, data) {
          if (err) return cb(err);
          return scan_code(data, pipeline, ext, filename, cb);
        });
      });
    };
  };

  scan_code = function scan_code(code, pipeline, ext, filename, cb) {
    var deplist, dir, file, funcs, imports, matches, path, _i, _len, _ref, _ref2;
    ext = '.' + ext.replace(/^\./, '');
    dir = Path.dirname(filename);
    funcs = [];
    deplist = [];
    matches = code.match(/^@import\s.*$/mg);
    if (matches != null) {
      _ref = code.match(/^@import\s.*$/mg);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        imports = _ref[_i];
        file = (_ref2 = imports.match(/^@import\s+'([^']+)'/)) != null ? _ref2 : imports.match(/^@import\s+"([^"]+)"/);
        if (file) {
          file = file[1];
          if (ext !== Path.extname(file)) file = file + ext;
          path = Path.join('/', Path.relative(pipeline.options.assets, Path.join(dir, file)));
          if (!path.match(/^\.\.\//)) {
            deplist.push(path);
            funcs.push(found_css_dep(pipeline, ext, path));
          }
        }
      }
    }
    pipeline.depmgr.depends_on(filename, deplist);
    return async.parallel(funcs, function(err, res) {
      if ((err != null ? err.code : void 0) === 'asset-pipeline/filenotfound') {
        return cb(new Error("dep not found"));
      } else if (err) {
        return cb(err);
      } else {
        if (funcs.length > 0) {
          filename = Path.join(pipeline.options.cache, Path.relative(pipeline.options.assets, filename));
          return require('./util').write_file(filename, code, function(err) {
            return cb(err, filename);
          });
        } else {
          return cb(null, filename);
        }
      }
    });
  };

  module.exports.search_deps = function search_deps(code, options, ext, cb) {
    return scan_code(code, options.pipeline, ext, options.filename, cb);
  };

}).call(this);
