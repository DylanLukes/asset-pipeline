// Generated by CoffeeScript 1.3.3
(function() {
  var Connect, DepMgr, Inlines, MakePath, Path, Pipeline, URL, async, fs, util;

  Path = require('path');

  Connect = require('connect');

  URL = require('url');

  fs = require('fs');

  async = require('async');

  DepMgr = require('./depmgr');

  MakePath = require('./makepath');

  util = require('./util');

  Inlines = require('./inlines');

  Pipeline = (function() {

    function Pipeline(options, plugins) {
      var file, _base, _base1, _base2, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.options = options;
      this.plugins = plugins;
      this.files = {};
      this.id = Math.random();
      if ((_ref = (_base = this.options).assets) == null) {
        _base.assets = './assets';
      }
      this.options.assets = Path.normalize(this.options.assets);
      if ((_ref1 = (_base1 = this.options).cache) == null) {
        _base1.cache = './cache';
      }
      this.options.cache = Path.normalize(this.options.cache);
      this.tempDir = Path.join(this.options.cache, 'tmp');
      this.staticDir = Path.join(this.options.cache, 'static');
      try {
        fs.mkdirSync(this.tempDir);
      } catch (_error) {}
      try {
        fs.mkdirSync(this.staticDir);
      } catch (_error) {}
      if (this.options.debug != null) {
        util.do_log(this.options.debug);
      }
      if ((_ref2 = (_base2 = this.options).extensions) == null) {
        _base2.extensions = ['.js', '.css'];
      }
      this.options.extensions = this.options.extensions.map(function(x) {
        if (x[0] === '.') {
          return x;
        } else {
          return '.' + x;
        }
      });
      this.depmgr = new DepMgr(this.options.assets);
      this.depmgr.min_check_time = (_ref3 = this.options.min_check_time) != null ? _ref3 : 1000;
      this.servers = {
        normal: Connect["static"](this.staticDir),
        caching: Connect["static"](this.staticDir, {
          maxAge: 365 * 24 * 60 * 60
        })
      };
      _ref5 = (_ref4 = this.options.files) != null ? _ref4 : [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        file = _ref5[_i];
        this.files[Path.join('/', file)] = {
          serve: true
        };
      }
      this.inlines = Inlines.prepare({
        filename: '/',
        pipeline: this
      });
    }

    Pipeline.prototype.can_serve_file = function can_serve_file(file) {
      var ext, _i, _len, _ref, _ref1;
      if ((_ref = this.files[file]) != null ? _ref.serve : void 0) {
        return true;
      }
      _ref1 = this.options.extensions;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        ext = _ref1[_i];
        if (Path.extname(file) === ext) {
          return true;
        }
      }
      return false;
    };

    Pipeline.prototype.middleware = function middleware() {
      var _this = this;
      return function(req, res, realNext) {
        var file, next, path, server, url, _ref;
        next = function next() {
          var oldrender;
          oldrender = res.render;
          if (oldrender != null) {
            res.render = function render(view, options, fn) {
              var name, value, _ref, _ref1;
              if (options == null) {
                options = {};
              }
              if ('function' === typeof options) {
                fn = options;
                options = {};
              }
              _ref = _this.inlines;
              for (name in _ref) {
                value = _ref[name];
                if ((_ref1 = options[name]) == null) {
                  options[name] = value;
                }
              }
              return oldrender.call(res, view, options, function(err, code) {
                if (err) {
                  return req.next(err);
                }
                return Inlines.call(code, function(err, newcode) {
                  if (err) {
                    return req.next(err);
                  }
                  if (fn) {
                    return fn(null, newcode);
                  }
                  return res.send(newcode);
                });
              });
            };
          }
          return realNext();
        };
        url = URL.parse(req.url);
        path = decodeURIComponent(url.pathname);
        file = Path.join('/', path);
        if (_this.can_serve_file(file)) {
          util.log('trying to serve ' + file);
          server = ((_ref = _this.files[file]) != null ? _ref.cache : void 0) ? _this.servers.caching : _this.servers.normal;
          return _this.serve_file(req, res, file, server, next);
        } else {
          return next();
        }
      };
    };

    Pipeline.prototype.serve_file = function serve_file(req, res, file, server, next, safe) {
      var file_defined, safeNext, _base, _ref, _ref1,
        _this = this;
      if (safe == null) {
        safe = 1;
      }
      safeNext = next;
      if (safe) {
        safeNext = function safeNext(err) {
          if (err) {
            return next(err);
          }
          _this.files[file].compiled = false;
          return _this.serve_file(req, res, file, server, next, 0);
        };
      }
      if (((_ref = this.files[file]) != null ? _ref.compiled : void 0) && this.files[file].cache) {
        return server(req, res, safeNext);
      } else {
        file_defined = this.files[file] != null;
        if ((_ref1 = (_base = this.files)[file]) == null) {
          _base[file] = {};
        }
        this.files[file].serve = true;
        return this.compile_file(file, function(err) {
          if (err) {
            if (!file_defined) {
              delete _this.files[file];
            }
            if ((err != null ? err.code : void 0) === 'asset-pipeline/filenotfound') {
              return next();
            } else {
              util.log('ERROR: ' + err);
              return next(err);
            }
          }
          util.log("publishing " + file);
          return _this.publish_file(file, function(err) {
            if (err) {
              return next(err);
            }
            return server(req, res, safeNext);
          });
        });
      }
    };

    Pipeline.prototype.check_if_changed = function check_if_changed(file, cb) {
      var _ref,
        _this = this;
      if (!((_ref = this.files[file]) != null ? _ref.compiled : void 0)) {
        return cb();
      } else {
        return this.depmgr.check(file, function(err, changed) {
          if (err) {
            return cb(err);
          }
          if (changed) {
            _this.files[file].compiled = false;
          }
          return cb();
        });
      }
    };

    Pipeline.prototype.compile_file = function compile_file(file, mcb) {
      var _this = this;
      return this.check_if_changed(file, function(err) {
        var _ref;
        if (err) {
          return mcb(err);
        }
        if ((_ref = _this.files[file]) != null ? _ref.compiled : void 0) {
          return mcb(null, false);
        }
        return util.NoConcurrent("compile " + _this.id + " " + file, mcb, function(cb) {
          var finish;
          util.log("compiling " + file);
          finish = function finish(err) {
            var _base, _ref1;
            if (!err) {
              if ((_ref1 = (_base = _this.files)[file]) == null) {
                _base[file] = {};
              }
              util.log("compiled successfully: " + file);
              _this.files[file].compiled = true;
            }
            return cb(err, true);
          };
          return MakePath.find(_this.options.assets, file, function(err, found) {
            if (err) {
              _this.depmgr.resolves_to(file, null);
              return cb(err);
            }
            _this.depmgr.resolves_to(file, found.path);
            return _this.send_to_pipeline(file, found.path, found.extlist, function(err) {
              var _ref1;
              if (err) {
                return cb(err);
              }
              if ((_ref1 = _this.files[file]) != null ? _ref1.serve : void 0) {
                return util.link_file(_this.req_to_cache(file), _this.req_to_static(file), function(err) {
                  if (!err) {
                    _this.files[file].published = true;
                  }
                  return finish(err);
                });
              } else {
                return finish(err);
              }
            });
          });
        });
      });
    };

    Pipeline.prototype.publish_file = function publish_file(file, cb) {
      var _this = this;
      if ((this.files[file] != null) && this.files[file].serve && !this.files[file].published) {
        return util.link_file(this.req_to_cache(file), this.req_to_static(file), function(err) {
          _this.files[file].published = true;
          return cb();
        });
      } else {
        return cb();
      }
    };

    Pipeline.prototype.actual_pipeline = function actual_pipeline(data, pipes, filename, attrs, cb) {
      var newfile, oldfile, pipe,
        _this = this;
      if (pipes.length === 0) {
        return cb(null, data);
      }
      data = data.toString('utf8');
      pipe = pipes.shift();
      if (pipe.ext === '') {
        return this.actual_pipeline(data, pipes, pipe.file, attrs, cb);
      }
      if (!this.plugins[pipe.ext].compile) {
        return cb(new Error('compiler not found'));
      }
      attrs.filename = pipe.file;
      oldfile = this.path_to_req(filename);
      newfile = this.path_to_req(pipe.file);
      this.depmgr.clear_deps(newfile);
      this.depmgr.depends_on(newfile, oldfile);
      attrs.filename = pipe.file;
      return this.plugins[pipe.ext].compile(data, attrs, function(err, result) {
        if (err) {
          return cb(err);
        }
        return _this.actual_pipeline(result, pipes, pipe.file, attrs, cb);
      });
    };

    Pipeline.prototype.send_to_pipeline = function send_to_pipeline(reqfile, file, plugins, cb) {
      var dest,
        _this = this;
      dest = Path.join(this.tempDir, reqfile);
      this.depmgr.clear_deps(this.path_to_req(file));
      return fs.readFile(file, function(err, data) {
        if (err) {
          return cb(err);
        }
        return _this.actual_pipeline(data, plugins, file, {
          pipeline: _this
        }, function(err, data) {
          if (err) {
            return cb(err);
          }
          return util.write_file(dest, data, cb);
        });
      });
    };

    Pipeline.prototype.register = function register(orig_name, static_name, cb) {
      var _this = this;
      return util.link_file(this.req_to_cache(orig_name), this.req_to_static(static_name), function(err, res) {
        if (err) {
          return cb(err);
        }
        _this.files[static_name] = {
          cache: true,
          serve: true,
          compiled: true,
          published: true
        };
        return cb();
      });
    };

    Pipeline.prototype.path_to_req = function path_to_req(path) {
      return Path.join('/', Path.relative(this.options.assets, path));
    };

    Pipeline.prototype.path_to_cache = function path_to_cache(path) {
      return Path.join(this.tempDir, this.path_to_req(path));
    };

    Pipeline.prototype.req_to_cache = function req_to_cache(path) {
      return Path.join(this.tempDir, path);
    };

    Pipeline.prototype.req_to_static = function req_to_static(path) {
      return Path.join(this.staticDir, path);
    };

    return Pipeline;

  })();

  module.exports = Pipeline;

}).call(this);
