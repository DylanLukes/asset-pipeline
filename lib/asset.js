// Generated by CoffeeScript 1.2.1-pre
(function() {
  var Argv, Path, Pipeline, Plugins, config, file, fs, getTemp, optimist, pipeline, plugins, rimraf, tempdir;

  Pipeline = require('./pipeline');

  Plugins = require('./plugins');

  Path = require('path');

  fs = require('fs');

  rimraf = require('rimraf');

  optimist = require('optimist').check(function(argv) {
    if (argv._.length === 0) {
      throw "";
    } else {
      return true;
    }
  }).check(function(argv) {
    if (argv._.length !== 1) {
      throw "Wrong parameters";
    } else {
      return true;
    }
  }).usage("Usage: $0 file");

  Argv = optimist.argv;

  getTemp = function getTemp() {
    var def, env, i, value, _i, _len;
    def = '/tmp';
    env = ['TMPDIR', 'TMP', 'TEMP'];
    for (_i = 0, _len = env.length; _i < _len; _i++) {
      i = env[_i];
      if (value = process.env[env[i]]) return fs.realpathSync(value);
    }
    return fs.realpathSync(def);
  };

  tempdir = Path.join(getTemp(), String(Math.random()).replace(/0\./, ''));

  fs.mkdirSync(tempdir);

  config = {
    assets: '/',
    cache: tempdir,
    cwd: '.'
  };

  file = Argv._[0];

  plugins = Plugins.load();

  pipeline = new Pipeline(config, plugins);

  pipeline.compile_file(file, {}, function(err) {
    if (err) {
      rimraf(tempdir, function() {});
      if (err) return console.warn(err.toString());
    }
    return fs.readFile(pipeline.req_to_cache(file), function(err, res) {
      if (err) {
        rimraf(tempdir, function() {});
        if (err) return console.warn(err.toString());
      }
      console.log(res.toString());
      return rimraf(tempdir, function() {});
    });
  });

}).call(this);
